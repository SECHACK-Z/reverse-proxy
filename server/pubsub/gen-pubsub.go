// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package pubsub

type __AccessEventPubSub struct {
	subs map[string]func(AccessEvent)
	c    chan AccessEvent
}

var _AccessEventPubSub *__AccessEventPubSub

func GetAccessEventPubSub() *__AccessEventPubSub {
	if _AccessEventPubSub == nil {
		_AccessEventPubSub = &__AccessEventPubSub{
			subs: make(map[string]func(AccessEvent)),
			c:    make(chan AccessEvent, 10),
		}
	}
	return _AccessEventPubSub
}

func (ps *__AccessEventPubSub) Sub(f func(et AccessEvent)) string {
	subID := randomStr(5)
	for _, ok := ps.subs[subID]; ok; _, ok = ps.subs[subID] {
		subID = randomStr(5)
	}
	ps.subs[subID] = f
	return subID
}

func (ps *__AccessEventPubSub) Pub(event AccessEvent) {
	for _, f := range ps.subs {
		go f(event)
	}
}

type __AccessEvent2PubSub struct {
	subs map[string]func(AccessEvent2)
	c    chan AccessEvent2
}

var _AccessEvent2PubSub *__AccessEvent2PubSub

func GetAccessEvent2PubSub() *__AccessEvent2PubSub {
	if _AccessEvent2PubSub == nil {
		_AccessEvent2PubSub = &__AccessEvent2PubSub{
			subs: make(map[string]func(AccessEvent2)),
			c:    make(chan AccessEvent2, 10),
		}
	}
	return _AccessEvent2PubSub
}

func (ps *__AccessEvent2PubSub) Sub(f func(et AccessEvent2)) string {
	subID := randomStr(5)
	for _, ok := ps.subs[subID]; ok; _, ok = ps.subs[subID] {
		subID = randomStr(5)
	}
	ps.subs[subID] = f
	return subID
}

func (ps *__AccessEvent2PubSub) Pub(event AccessEvent2) {
	for _, f := range ps.subs {
		go f(event)
	}
}
