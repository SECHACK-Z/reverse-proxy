// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package pubsub

// TODO: Close処理
type AccessEventPubSub struct {
	subs map[string]func(AccessEvent)
	c    chan AccessEvent
}

var _AccessEventPubSub *AccessEventPubSub

func GetAccessEventPubSub() *AccessEventPubSub {
	if _AccessEventPubSub == nil {
		_AccessEventPubSub = &AccessEventPubSub{
			subs: make(map[string]func(AccessEvent)),
			c:    make(chan AccessEvent, 10),
		}
	}
	return _AccessEventPubSub
}

func (ps *AccessEventPubSub) Sub(f func(et AccessEvent)) string {
	subID := randomStr(5)
	for _, ok := ps.subs[subID]; ok; _, ok = ps.subs[subID] {
		subID = randomStr(5)
	}
	ps.subs[subID] = f
	return subID
}

func (ps *AccessEventPubSub) Pub(event AccessEvent) {
	for _, f := range ps.subs {
		go f(event)
	}
}

// TODO: Close処理
type SystemEventPubSub struct {
	subs map[string]func(SystemEvent)
	c    chan SystemEvent
}

var _SystemEventPubSub *SystemEventPubSub

func GetSystemEventPubSub() *SystemEventPubSub {
	if _SystemEventPubSub == nil {
		_SystemEventPubSub = &SystemEventPubSub{
			subs: make(map[string]func(SystemEvent)),
			c:    make(chan SystemEvent, 10),
		}
	}
	return _SystemEventPubSub
}

func (ps *SystemEventPubSub) Sub(f func(et SystemEvent)) string {
	subID := randomStr(5)
	for _, ok := ps.subs[subID]; ok; _, ok = ps.subs[subID] {
		subID = randomStr(5)
	}
	ps.subs[subID] = f
	return subID
}

func (ps *SystemEventPubSub) Pub(event SystemEvent) {
	for _, f := range ps.subs {
		go f(event)
	}
}
